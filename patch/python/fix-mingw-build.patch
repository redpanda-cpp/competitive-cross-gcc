diff --git a/Include/internal/pycore_time.h b/Include/internal/pycore_time.h
index 205ac5d3781..c30e07f4b4a 100644
--- a/Include/internal/pycore_time.h
+++ b/Include/internal/pycore_time.h
@@ -58,9 +58,7 @@ extern "C" {
 #endif
 
 
-#ifdef __clang__
 struct timeval;
-#endif
 
 #define _SIZEOF_PYTIME_T 8
 
diff --git a/Modules/_winapi.c b/Modules/_winapi.c
index d51586e6025..c5a1ff1c01d 100644
--- a/Modules/_winapi.c
+++ b/Modules/_winapi.c
@@ -642,7 +642,7 @@ _winapi_CreateJunction_impl(PyObject *module, LPCWSTR src_path,
     tp.base.PrivilegeCount = 1;
     tp.base.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
     if (!AdjustTokenPrivileges(token, FALSE, &tp.base, sizeof(previousTp),
-                               &previousTp.base, &previousTpSize)) {
+                               &previousTp.base, (DWORD *)&previousTpSize)) {
         goto cleanup;
     }
 
diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index 40d0f86e6ae..88b1dcf3856 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -43,6 +43,7 @@
 #  if defined(MS_WINDOWS_DESKTOP) || defined(MS_WINDOWS_SYSTEM)
 #    define HAVE_SYMLINK
 #  endif /* MS_WINDOWS_DESKTOP | MS_WINDOWS_SYSTEM */
+#  include <process.h>
 #endif
 
 #ifndef MS_WINDOWS
@@ -5144,7 +5145,7 @@ os__path_splitroot_impl(PyObject *module, path_t *path)
     }
 
     Py_BEGIN_ALLOW_THREADS
-    ret = PathCchSkipRoot(buffer, &end);
+    ret = PathCchSkipRoot(buffer, (const wchar_t **)&end);
     Py_END_ALLOW_THREADS
     if (FAILED(ret)) {
         result = Py_BuildValue("sO", "", path->object);
diff --git a/Python/sysmodule.c b/Python/sysmodule.c
index 9cf4a580d44..83f12fc48a0 100644
--- a/Python/sysmodule.c
+++ b/Python/sysmodule.c
@@ -3522,6 +3522,8 @@ _PySys_InitCore(PyThreadState *tstate, PyObject *sysdict)
 #ifdef MS_COREDLL
     SET_SYS("dllhandle", PyLong_FromVoidPtr(PyWin_DLLhModule));
     SET_SYS_FROM_STRING("winver", PyWin_DLLVersionString);
+#else
+    SET_SYS("winver", Py_None);
 #endif
 #ifdef ABIFLAGS
     SET_SYS_FROM_STRING("abiflags", ABIFLAGS);
